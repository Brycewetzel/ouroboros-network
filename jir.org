#+TITLE: Consensus team micro-process proposal
#+AUTHOR: The Consensus Team

* Motivation
   Why the new JIRA board? The existing "Consensus" content in Jira is a
   confusing bag of previous attempts. So we want a view that excludes it; once
   we settle in to the new process, we can migrate some of the items from the
   old lists to this new dashboard. We want a narrow dashboard for just our
   team. At any time, any of us (eg Jack) can go look to see what any another
   team member is currently doing. We want a source-of-truth for weekly
   reporting (eg to Jack). We also have a way for team members to know which
   task to pick next.
   Please note that with this process we are not intending to help
   us predict deliver dates?

* JIRA configuration

** Types of Tasks

 We want just three kinds Jira tickets: ~Epic~, ~Open Problem~ and ~Task~. Only
 ~Task~ tickets are actionable, meaning they can be assigned to a developer and
 put on the Kanban board.

*** Epic
    A ticket of type ~Epic~ will represent feature that requires substantially
    bigger team effort.  They are an entry point for anyone willing to
    understand what the given feature is about and how work on it is
    progressing.  ~Epics~ will aggregate tickets of type ~Task~ and ~Open
    Problem~.

    When creating this ticket we want to only provide:
    + its title / name
    + description

    This ticket is binary in its nature, will have following two statuses:
    + Open
    + Done
    When ticket is created it should by default get status ~Open~.

    Example ticket: "Ouroboros Genesis"

*** Open Problem
    Tickets of type ~Open Problem~ will represent research problems that require
    further investigation.  They will aggregate tickets of type ~Task~. Those
    tasks will represent actionable issues that move forward investigation of a
    given ~Open Problem~.

    When creating this ticket we want to only provide:
    + it's title / name
    + description

    This ticket is binary in its nature, will have following two statuses:
    + Open
    + Done
    When ticket is created it should by default get status ~Open~.

    Example ticket: "Eclipsing Detection Problem"

*** Task
    Tasks represents actionable issues, that means issues that can be assigned
    to developer and put on the Kanban board.

    When creating this ticket we want to only provide:
    + its title / name
    + description
    + assignee

    ~Tasks~ can be divided into subtasks. Each subtask can be assigned to a
    developer.

    This ticket can have following statuses:
    + Open
    + To Do
    + In Progress
    + Blocked
    + Done
    When ticket is created it should by default get status ~Open~.

    Tickets of type ~Task~ can be:
    + connected to an ~Epic~ ticket
    + connected to a ~Open Problem~ ticket
    + not connected to any ticket at all
**** TODO Can't open questions be blocked?

** Kanban board
 We want to have a dedicated to our team Kanban board. This board should only
 holds tickets of type ~Task~.  Tickets with status ~Open~ should be aggregated
 in "Backlog", all other statuses (~To Do~, ~In Progress~, ~Blocked~ and ~Done~)
 should have corresponding columns in the Kanban board.  If ~Task~ is divided
 into subtasks, then on the Kanban Board task should become a 'swimlane' that
 holds its subtasks.

*** Open questions
**** TODO How can we remove the ticket from board once it is ~Done~
     and we've acknowledged that it is done

* The process
 We wanted to keep a process that on one hand is as lightweight as possible and
 on the other hand keeps our work as much transparent as it can.  Ideally we aim
 for a process in which at any point in time anyone with access to our JIRA can
 tell:
 + what is the team currently working at,
 + what are the blocked tickets and why are they blocked

 The process should be simple to use for the engineers and any ambiguities
 should be wiped out from the tools supporting the process. That includes
 removal of fields we never set, subprocess and methodologies that we do not
 follow.  Creating and maintaining a ticket should be quick and straightforward
 task.  See [[JIRA configuration]] for details how we want to configure the tool.

 Actionable tickets will be of type ~Task~. When created they will have status
 open and thus they will automatically be placed in the ~Backlog~.  It is
 responsibility of the Jack and Team Lead (Nick/Damian) to keep that Backlog
 prioritized so that tasks with highest priority are listed on the top of the
 Backlog.

 At any point ticket can be moved from Backlog to Kanban board by either
 dragging it via the UI, or changing its status to ~To Do~ at which point ticket
 can be assigned to a person and then go through its lifecycle: To Do, In
 Progress and Done.

 Task should usually last few days. If it sits in ~In Progress~ for longer then
 that is is most likely an indication that is should be broken into subtasks.

 Subtasks will be visualized on the Kanban board as well. In that case a Task
 becomes a swimlane where the Subtasks are going through typical lifecycle (To
 Do, In Progress and Done). Once all subtasks are done, the ~Task~ can be
 considered ~Done~

* FAQ
** What is issue proposed hierarchy?
   It can be viewed as:
#+BEGIN_SRC
- Epic
  - Task
  - Open problem
    - Task
#+END_SRC
   Please note however that
   + Task can be grouped under Epic or Open Problem or not grouped at all
   + All issues can be easily linked, relations like (created from, blocked by
     etc)
** What is the difference between Open and To Do ~Task~
   ~Open~ - youâ€™ve defined it, it exists, a unit of work but you are not planning
   to work on it any time soon. Maybe it needs grooming, maybe there is no
   simply enough man-power. Tickets with status Open lands in the Backlog and
   are NOT visible on the Kanban Board.
   ~To Do~ - this status means that ticket is defined and will be worked on in a
   near future. Tickets with status To Do will be visible in the Kanban Board,
   they are no longer visible in the Backlog.
** What about *definition of done* for issues?
   "I'd like that when we start working on a very concrete programming task we
   agree on the scope with the stakeholders beforehand."

   Definition of Done can be simply added (as plain text) into a issue
   description.
