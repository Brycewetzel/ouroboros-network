name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.6.5", "8.10.2"]
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2

    - name: Select build directory
      run: |
        if [ "$OS" == Windows_NT ]; then
          CABAL_BUILDDIR="D:\\a\\_temp\\dist"
        else
          CABAL_BUILDDIR="dist-newstyle"
        fi

        echo "CABAL_BUILDDIR=$CABAL_BUILDDIR"
        echo "CABAL_BUILDDIR=$CABAL_BUILDDIR" >> $GITHUB_ENV

    - name: Install pkgconfiglite
      if: matrix.os == 'windows-latest'
      run: choco install -y pkgconfiglite

    - name: Install libsodium
      if: matrix.os == 'windows-latest'
      run: |
        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz
        tar zxvf libsodium-1.0.18-mingw.tar.gz

        sed -i "s|/d/a/1/s/|D:/a/cardano-node/cardano-node/|g" libsodium-win64/lib/pkgconfig/libsodium.pc

        export PKG_CONFIG_PATH="$(readlink -f libsodium-win64/lib/pkgconfig)"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        export LIBSODIUM_PATH="$(readlink -f libsodium-win64/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "LIBSODIUM_PATH=$LIBSODIUM_PATH"
        echo "$LIBSODIUM_PATH" >> $GITHUB_PATH

    - name: Install libsodium
      if: matrix.os == 'macos-latest'
      run: brew install libsodium

    - name: Configure to use libsodium
      run: |
        cat >> cabal.project <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

    - name: Select optimal cabal version
      run: |
        case "$OS" in
          Windows_NT)   echo "CABAL_VERSION=3.2.0.0"      >> $GITHUB_ENV;;
          *)            echo "CABAL_VERSION=3.4.0.0-rc4"  >> $GITHUB_ENV;;
        esac

    - uses: actions/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ env.CABAL_VERSION }}

    - name: Patch GHC 8.10.2 linker
      if: matrix.os == 'windows-latest' && matrix.ghc == '8.10.2'
      run: |
        sed -i \
          's|C:/GitLabRunner/builds/2WeHDSFP/0/ghc/ghc/inplace/mingw/bin/ld.exe|C:/ProgramData/chocolatey/lib/ghc.8.10.2/tools/ghc-8.10.2/mingw/bin/ld.exe|g' \
          C:/ProgramData/chocolatey/lib/ghc.8.10.2/tools/ghc-8.10.2/lib/settings

    - name: Install build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Set up temp directory
      run: |
        echo 'TMPDIR=${{ runner.temp }}'  >> $GITHUB_ENV
        echo 'TMP=${{ runner.temp }}'     >> $GITHUB_ENV

    # Cache cabal-store
    - name: cache cabal store
      uses: actions/cache@v2
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cabal-store-${{ matrix.ghc }}-${{ matrix.os }}
    # Cache parts of dist-newstyle (C:\dist)
    - name: cache buiddir [cache]
      uses: actions/cache@v2
      with:
        path: C:\dist\cache
        key: dist-cache-${{ matrix.ghc }}-${{ matrix.os }}
    - name: cache buiddir [src]
      uses: actions/cache@v2
      with:
        path: C:\dist\src
        key: dist-src-${{ matrix.ghc }}-${{ matrix.os }}
    - name: cache builddir [packagedb]
      uses: actions/cache@v2
      with:
        path: C:\dist\packagedb
        key: dist-packagedb-${{ matrix.ghc }}-${{ matrix.os }}

    - name: update Hackage index
      run: cabal v2-update

    # checkout repository
    - name: checkout ouroboros-network repository
      uses: actions/checkout@v2

    - name: Cabal Configure
      run: cabal --builddir="$CABAL_BUILDDIR" configure --enable-tests

    - name: Use cabal.project.local.windows
      run: |
        cat ./cabal.project.local.ci.windows >> ./cabal.project.local
        cat ./cabal.project.local

    - name: Install happy
      run: |
        cabal --builddir="$CABAL_BUILDDIR" install happy --install-method=copy

    # Build dependencies
    - name: Build dependencies
      run: cabal --builddir="$CABAL_BUILDDIR" build --only-dependencies all

    #
    # Build & Test network packages
    #

    - name: Win32-network [build]
      if: matrix.os == 'windows-latest'
      run: cabal --builddir="$CABAL_BUILDDIR" build Win32-network

    # ntp-client
    - name: ntp-client [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build ntp-client

    - name: io-sim-classes [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build io-sim-classes

    - name: io-sim [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build io-sim

    - name: typed-protocols [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build typed-protocols

    - name: typed-protocols-examples [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build typed-protocols-examples

    - name: network-mux [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build network-mux

    - name: ouroboros-network-framework [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build ouroboros-network-framework

    - name: ouroboros-network [build]
      run: cabal --builddir="$CABAL_BUILDDIR" build ouroboros-network

    #
    # Test network packages
    #

    - name: Win32-network [test]
      if: matrix.os == 'windows-latest'
      run: cabal --builddir="$CABAL_BUILDDIR" run Win32-network:test

    - name: ntp-client [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run ntp-client:test

    - name: io-sim [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run io-sim:test

    - name: io-sim-classes [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run io-sim-classes:test

    - name: typed-protocols-examples [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run typed-protocols-examples:tests

    - name: network-mux [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run network-mux:test

    # issue: #1818
    - name: ourobors-network-framework [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run ouroboros-network-framework:test -- -p '$0 != "typed-protocols.Socket.socket send receive IPv4"' 

    - name: ouroboros-network [test]
      run: cabal --builddir="$CABAL_BUILDDIR" run ouroboros-network:test

    # TODO: we need to install the cddl tool
    # - name: ouroboros-network [cddl]
    #   run: cabal --builddir="$CABAL_BUILDDIR" run test-cddl
